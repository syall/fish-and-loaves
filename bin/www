require('dotenv').config();
const { FISH_HOST, FISH_PORT, FISH_SSL } = process.env;

const port = normalizePort(FISH_PORT);

const app = require('../fish.js');

app.set('port', port);

const server = FISH_SSL === 'true'
    ? require('https').createServer({
        key: fs.readFileSync(`${configPath}.key`),
        cert: fs.readFileSync(`${configPath}.cert`),
    }, app)
    : require('http').createServer(app);

server.listen(port);

server.on('error', onError);
server.on('listening', onListening);
process.on('SIGTERM', onHandleSignal);
process.on('SIGINT', onHandleSignal);

function normalizePort(value) {
    const port = parseInt(value, 10);
    if (isNaN(port))
        return value;
    if (port >= 0)
        return port;
    return false;
}

function onError(error) {
    if (error.code !== 'EADDRINUSE')
        throw error;
    console.error(`${port} is already in use`);
    process.exit(1);
}

function onListening() {
    const { name } = require('../package.json');
    console.log(`${name} listening on ${port}.\n`);
}

function onHandleSignal() {
    console.log('\nHandling Interrupts...');
    server.close(() => {
        app.loaves.shelf.forEach(loaf => loaf.toast.kill());
        console.log('Orderly Shutdown...');
        process.exit(0);
    });
}
